To perform basic **CRUD operations** (Create, Read, Update, Delete) using Python with a MySQL database for the `users` table containing columns (`first_name`, `last_name`, `birthday`, `email`, `password`, `gender`, `age`, `dates`, `role`, `status`), you can follow the steps below.

We'll use the `mysql-connector-python` package to interact with the MySQL database. Make sure to install it if you don't have it already:

```bash
pip install mysql-connector-python
```

### 1. Establishing Connection
First, let's set up a connection to the MySQL database.

```python
import mysql.connector

# Establish the database connection
db = mysql.connector.connect(
    host="localhost",
    user="your_username",  # replace with your MySQL username
    password="your_password",  # replace with your MySQL password
    database="your_database"  # replace with your MySQL database name
)

cursor = db.cursor()
```

### 2. Inserting Data (Create)

```python
def insert_user(first_name, last_name, birthday, email, password, gender, age, dates, role, status):
    sql = "INSERT INTO users (first_name, last_name, birthday, email, password, gender, age, dates, role, status) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
    values = (first_name, last_name, birthday, email, password, gender, age, dates, role, status)
    
    cursor.execute(sql, values)
    db.commit()
    print(cursor.rowcount, "record inserted.")
```

### 3. Selecting Data (Read)

```python
def get_users():
    sql = "SELECT first_name, last_name, birthday, email, password, gender, age, dates, role, status FROM users"
    cursor.execute(sql)
    
    results = cursor.fetchall()
    
    for row in results:
        print(row)
```

### 4. Updating Data (Update)

```python
def update_user(email, new_first_name, new_last_name):
    sql = "UPDATE users SET first_name = %s, last_name = %s WHERE email = %s"
    values = (new_first_name, new_last_name, email)
    
    cursor.execute(sql, values)
    db.commit()
    
    print(cursor.rowcount, "record(s) updated.")
```

### 5. Deleting Data (Delete)

```python
def delete_user(email):
    sql = "DELETE FROM users WHERE email = %s"
    values = (email,)
    
    cursor.execute(sql, values)
    db.commit()
    
    print(cursor.rowcount, "record(s) deleted.")
```

### 6. Closing the Connection

After performing your operations, don't forget to close the connection.

```python
cursor.close()
db.close()
```

### Example Usage

```python
# Insert a new user
insert_user('John', 'Doe', '1990-05-20', 'john@example.com', 'johnpass', 'M', 30, '2023-09-17', 'admin', 'active')

# Select all users
get_users()

# Update a user by email
update_user('john@example.com', 'Johnny', 'Smith')

# Delete a user by email
delete_user('john@example.com')
```

This code provides basic functionality to insert, read, update, and delete records from the `users` table. Adjust the credentials and table data as needed for your specific case.
