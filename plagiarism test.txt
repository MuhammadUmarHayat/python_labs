Building a plagiarism checker in Python requires a method to compare submitted text against a database or online resources to detect similarities. To achieve this, you can use a combination of libraries and APIs, as well as web scraping techniques if you’re working with a small scale or learning project.

Here’s a guide to creating a basic plagiarism checker application in Python:

### Approach 1: Basic Text Similarity with Python Libraries
This approach compares text for similarity without needing online access. It’s suitable for checking against a small dataset.

### Approach 2: Online Plagiarism Detection with APIs
This approach uses plagiarism detection APIs like Copyscape, Grammarly, or Turnitin.

Below, I’ll demonstrate both methods:

---

## Approach 1: Text Similarity with Python (Local Dataset)

1. **Install Required Libraries**:
   ```bash
   pip install nltk scikit-learn
   ```

2. **Import Libraries**:
   ```python
   import nltk
   from sklearn.feature_extraction.text import TfidfVectorizer
   from sklearn.metrics.pairwise import cosine_similarity

   nltk.download('punkt')
   ```

3. **Function to Check Plagiarism by Cosine Similarity**:
   Here, we’ll tokenize and vectorize text using `TfidfVectorizer`, which helps identify text similarities using cosine similarity.

   ```python
   def calculate_similarity(text1, text2):
       documents = [text1, text2]
       tfidf_vectorizer = TfidfVectorizer().fit_transform(documents)
       similarity_matrix = cosine_similarity(tfidf_vectorizer[0:1], tfidf_vectorizer)
       return similarity_matrix[0][1]  # similarity score between text1 and text2
   ```

4. **Check Similarity Against a Local Dataset**:
   Suppose you have multiple texts stored locally and want to check if a given text is similar to any of them.

   ```python
   def check_local_plagiarism(text, local_texts):
       for i, sample_text in enumerate(local_texts):
           similarity = calculate_similarity(text, sample_text)
           print(f"Similarity with document {i+1}: {similarity * 100:.2f}%")
           if similarity > 0.8:  # threshold for plagiarism
               print("Potential plagiarism detected!")
   ```

5. **Run Plagiarism Check**:

   ```python
   local_texts = [
       "This is a sample text to check against.",
       "Another example document for plagiarism detection.",
       "This document has unique content."
   ]

   text_to_check = "Checking plagiarism with this sample text."
   check_local_plagiarism(text_to_check, local_texts)
   ```

---

## Approach 2: Using Online APIs for Plagiarism Detection

If you need more robust detection against online sources, consider using a plagiarism detection API.

### Setup for Copyscape API

1. **Sign Up for Copyscape**:
   Get an API key from [Copyscape](https://www.copyscape.com/api/).

2. **Install Requests Library**:
   ```bash
   pip install requests
   ```

3. **Use Copyscape API in Python**:
   Here’s a sample function to use Copyscape’s API for plagiarism detection.

   ```python
   import requests

   def check_plagiarism_with_copyscape(text):
       api_username = 'YOUR_USERNAME'
       api_key = 'YOUR_API_KEY'
       url = f'https://www.copyscape.com/api/?u={api_username}&k={api_key}&o=csearch&q={text}'

       response = requests.get(url)
       if response.status_code == 200:
           print("Plagiarism check successful.")
           print(response.text)  # API response, adjust parsing as needed
       else:
           print("Error with API request:", response.status_code)
   ```

4. **Run API-Based Plagiarism Check**:

   ```python
   text_to_check = "Your sample text to check plagiarism."
   check_plagiarism_with_copyscape(text_to_check)
   ```

### Notes:
- **Copyscape API**: This API has usage costs, so it’s best for checking important documents or larger content.
- **Grammarly and Turnitin**: Similar APIs exist with paid access, and setup is comparable to the above.

---

These two methods—basic similarity and paid API usage—can provide plagiarism detection on different scales.
